export declare const OrderBuyScript = "\n-- Arguments\nlocal orderId = ARGV[1]\nlocal buyerUserId = ARGV[2]\nlocal sellerUserId = ARGV[3]\nlocal price = tonumber(ARGV[4])\nlocal quantity = tonumber(ARGV[5]) -- Total quantity of the order\nlocal side = ARGV[6]\nlocal filled = tonumber(ARGV[7])   -- Amount filled in this transaction\n\n-- Input validation\nif not price or not quantity or not filled then\nreturn { err = \"Invalid price/quantity/filled amount\" }\nend\n\nlocal orderKey = \"order:\" .. orderId\nif redis.call(\"EXISTS\", orderKey) == 0 then\n  redis.call(\"HSET\", orderKey,\n    \"buyerUserId\", buyerUserId,\n    \"sellerUserId\", sellerUserId,\n    \"price\", price,\n    \"quantity\", quantity,\n    \"filled\", 0,\n    \"side\", side\n  )\nend\n\n-- Step 1: Check buyer's available balance\nlocal buyerBalanceKey = \"balance:\" .. buyerUserId\nlocal sellerBalanceKey = \"balance:\" .. sellerUserId\nlocal buyerBalance = tonumber(redis.call(\"HGET\", buyerBalanceKey, \"available\")) or 0\nlocal prevFills = tonumber(redis.call(\"HGET\",orderKey,'filled')) or 0\nlocal transactionAmount = (filled - prevFills)\nlocal totalCost = price * transactionAmount\n\nif buyerBalance < totalCost then\n  return {\n    err = \"BUYER_INSUFFICIENT_FUNDS\",\n    needed = totalCost,\n    available = buyerBalance\n  }\nend\n\n-- Step 2: Deduct funds from buyer\nredis.call(\"HINCRBYFLOAT\", buyerBalanceKey, \"available\", -totalCost)\nredis.call(\"HINCRBYFLOAT\", sellerBalanceKey, \"available\", totalCost)\n\n-- Step 3: Upsert order\n\n\n-- Step 4: Update filled amount\nredis.call(\"HSET\", orderKey, \"filled\", filled)\n\n-- Step 5: Check if order is fully filled\nlocal orderQuantity = tonumber(redis.call(\"HGET\", orderKey, \"quantity\")) or 0\n\nif filled >= orderQuantity then\n  redis.call(\"DEL\", orderKey)\n  return {\n    \"ok\",\"ORDER_COMPLETE\",\n    \"buyerUserId\", buyerUserId,\n    \"sellerUserId\",  sellerUserId,\n    \"totalCost\", totalCost,\n    \"filled\", filled,\n    \"newfill\", transactionAmount,\n    \"price\", price\n  }\nelse\n  return {\n    \"ok\", \"PARTIAL_FILL\",\n   \"buyerUserId\", buyerUserId,\n    \"sellerUserId\",  sellerUserId,\n    \"totalCost\", totalCost,\n    \"filled\", filled,\n    \"newfill\", transactionAmount,\n    \"price\", price\n  }\nend\n";
