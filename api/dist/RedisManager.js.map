{"version":3,"file":"RedisManager.js","sourceRoot":"","sources":["../src/RedisManager.ts"],"names":[],"mappings":";;;AAAA,iCAAkD;AAKlD,MAAa,YAAY;IACd,MAAM,CAAC,QAAQ,CAAc;IAC5B,MAAM,CAAiB;IACvB,SAAS,CAAgB;IAEjC;QACI,IAAI,CAAC,MAAM,GAAG,IAAA,oBAAY,GAAE,CAAA;QAC5B,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAA;QACrB,IAAI,CAAC,SAAS,GAAG,IAAA,oBAAY,GAAE,CAAA;QAC/B,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAEM,MAAM,CAAC,WAAW;QACrB,IAAG,CAAC,IAAI,CAAC,QAAQ,EAAC,CAAC;YACf,IAAI,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAA;QACtC,CAAC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAA;IACxB,CAAC;IACM,YAAY,CAAC,OAAuB;QACvC,OAAO,IAAI,OAAO,CAAuB,KAAK,EAAE,OAAO,EAAC,EAAE;YACtD,MAAM,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAA;YACnC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;YACf,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,EAAC,CAAC,OAAO,EAAC,EAAE;gBAChC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;gBACpB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAA;gBAC3B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAChC,CAAC,CAAC,CAAA;YACF,IAAI,IAAI,GAAI,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,QAAQ,EAAC,EAAE,EAAE,OAAO,EAAC,CAAC,CAAC,CAAA;YAEzF,OAAO,IAAI,CAAA;QAEf,CAAC,CAAC,CAAA;IACN,CAAC;IACM,iBAAiB;QACpB,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACrG,CAAC;CAEJ;AArCD,oCAqCC","sourcesContent":["import {RedisClientType,createClient} from 'redis'\nimport { MessageToEngine } from './types/to'\nimport { MessageFromOrderbook } from './types'\n\n\nexport class RedisManager{\n    public static instance: RedisManager\n    private client: RedisClientType\n    private publisher:RedisClientType\n    \n    private constructor(){\n        this.client = createClient()\n        this.client.connect()\n        this.publisher = createClient()\n        this.publisher.connect()\n    }\n\n    public static getInstance(){\n        if(!this.instance){\n            this.instance = new RedisManager()\n        }\n        return this.instance\n    }\n    public sendAndAwait(message:MessageToEngine){\n        return new Promise<MessageFromOrderbook>(async (resolve)=>{\n            const id = this.getRandomClientId()\n            console.log(id)\n            this.client.subscribe(id,(message)=>{\n                console.log(message)\n                this.client.unsubscribe(id)\n                resolve(JSON.parse(message))\n            })\n            let find  = await this.publisher.lPush(\"messages\",JSON.stringify({clientId:id, message}))\n    \n            return find\n            \n        })\n    }\n    public getRandomClientId() {\n        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    }\n\n}"]}