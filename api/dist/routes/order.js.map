{"version":3,"file":"order.js","sourceRoot":"","sources":["../../src/routes/order.ts"],"names":[],"mappings":";;;AAAA,qCAAiC;AACjC,kDAA+C;AAC/C,oCAAuE;AACvE,mDAA8E;AAIjE,QAAA,WAAW,GAAU,IAAA,gBAAM,GAAE,CAAC;AAE3C,mBAAW,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACrC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IAClB,0BAAgB,CAAC,GAAG,CAAC;QACjB,MAAM,EAAC,MAAM;QACb,MAAM,EAAC,cAAc;KACxB,CAAC,CAAA;IACF,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAK3D,MAAM,QAAQ,GAAG,MAAM,2BAAY,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC;QAC3D,IAAI,EAAE,oBAAY;QAClB,IAAI,EAAE;YACF,MAAM;YACN,KAAK;YACL,QAAQ;YACR,IAAI;YACJ,MAAM;SACT;KACJ,CAAC,CAAC;IACH,gCAAsB,CAAC,GAAG,CAAC;QACvB,MAAM,EAAC,OAAO;QACd,MAAM,EAAC,eAAe;QACtB,OAAO,EAAC,wCAAwC;KACnD,CAAC,CAAA;IAGF,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC;AAEH,mBAAW,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACrC,0BAAgB,CAAC,GAAG,CAAC;QACnB,MAAM,EAAC,QAAQ;QACf,MAAM,EAAC,cAAc;KACxB,CAAC,CAAA;IACF,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IACrC,MAAM,QAAQ,GAAG,MAAM,2BAAY,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC;QAC3D,IAAI,EAAE,oBAAY;QAClB,IAAI,EAAE;YACF,OAAO;YACP,MAAM;SACT;KACJ,CAAC,CAAC;IAEH,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC;AAEH,mBAAW,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACtC,0BAAgB,CAAC,GAAG,CAAC;QACnB,MAAM,EAAC,KAAK;QACZ,MAAM,EAAC,cAAc;KACxB,CAAC,CAAA;IACF,MAAM,QAAQ,GAAG,MAAM,2BAAY,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC;QAC3D,IAAI,EAAE,uBAAe;QACrB,IAAI,EAAE;YACF,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,MAAgB;YAClC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,MAAgB;SACrC;KACJ,CAAC,CAAC;IACH,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC","sourcesContent":["import { Router } from \"express\";\nimport { RedisManager } from \"../RedisManager\";\nimport { CREATE_ORDER, CANCEL_ORDER, GET_OPEN_ORDERS } from \"../types\";\nimport {httpSuccessfullRequest, httpTotalRequest} from '@repo/backend/metrics'\n\n\n\nexport const orderRouter:Router = Router();\n\norderRouter.post(\"/\", async (req, res) => {\n    console.log(\"hey\")\n    httpTotalRequest.inc({\n        method:\"post\",\n        routes:\"api/v1/order\"\n    })\n    const { market, price, quantity, side, userId } = req.body;\n\n\n    \n\n    const response = await RedisManager.getInstance().sendAndAwait({\n        type: CREATE_ORDER,\n        data: {\n            market,\n            price,\n            quantity,\n            side,\n            userId\n        }\n    });\n    httpSuccessfullRequest.inc({\n        method:\"/post\",\n        routes:\"/api/v1/order\",\n        message:\"Order created and sent to the frontend\"\n    })\n\n\n    res.json(response.payload);\n});\n\norderRouter.delete(\"/\", async (req, res) => {\n      httpTotalRequest.inc({\n        method:\"delete\",\n        routes:\"api/v1/order\"\n    })\n    const { orderId, market } = req.body;\n    const response = await RedisManager.getInstance().sendAndAwait({\n        type: CANCEL_ORDER,\n        data: {\n            orderId,\n            market\n        }\n    });\n    \n    res.json(response.payload);\n});\n\norderRouter.get(\"/open\", async (req, res) => {\n      httpTotalRequest.inc({\n        method:\"get\",\n        routes:\"api/v1/order\"\n    })\n    const response = await RedisManager.getInstance().sendAndAwait({\n        type: GET_OPEN_ORDERS,\n        data: {\n            userId: req.query.userId as string,\n            market: req.query.market as string\n        }\n    });\n    res.json(response.payload);\n});"]}